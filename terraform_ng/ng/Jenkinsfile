pipeline {
    agent any
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
        AWS_DEFAULT_REGION    = 'us-east-1'
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: 'destroy']],
                    userRemoteConfigs: [[url: 'https://github.com/AshokTippaluri/Terraform_project.git']]
                ]
                script {
                    echo "Checked out the Terraform project from GitHub."
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir('terraform_ng/ng') {
                    sh '''
                        echo "Current directory: $(pwd)"
                        terraform init -input=false
                    '''
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir('terraform_ng/ng') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('terraform_ng/ng') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        // stage('Terraform Apply') {
        //     steps {
        //         dir('terraform_ng/ng') {
        //             sh 'terraform apply -auto-approve tfplan'
        //         }
        //     }
        // }

        stage('Terraform Destroy') {
            steps {
                dir('terraform_ng/ng') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline succeeded! Terraform infrastructure deployed successfully."
        }
        failure {
            echo "Pipeline failed! Check the logs for errors."
        }
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
    }
}
